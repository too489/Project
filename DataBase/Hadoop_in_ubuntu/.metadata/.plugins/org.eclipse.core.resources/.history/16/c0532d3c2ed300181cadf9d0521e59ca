package Hw1;
import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class Most_Call_People_Reducer extends Reducer<Text,IntWritable, Text, IntWritable>{
		private IntWritable result = new IntWritable();
		public Map<String ,Integer> map = new HashMap<String, Integer>();
		public void reduce(Text key,Iterable<IntWritable> values,Context context)throws IOException, InterruptedException{
			int sum = 0;
			for(IntWritable val : values) {
				sum+=val.get();
			}
			result.set(sum);
			//context.write(key,result);
			map.put(key.toString(),sum);
		}	
		public void cleanup(Context context) throws IOException, InterruptedException {
			Map<String,Integer> sortedMap = new HashMap<String, Integer>();
			
			sortedMap =sortMap(map);
			
			for (Entry<String, Integer> entry : sortedMap.entrySet()) {
				context.write(new Text(entry.getKey()), new IntWritable(entry.getValue()));
			}
		}
		
		public Map<String, Integer> sortMap (Map<String,Integer> unsortMap){
			Map<String, Integer> hashmap = new HashMap<String,Integer>();
			int count = 0;
			List<Map.Entry<String,Integer>> list = new LinkedList<Map.Entry<String,Integer>>(unsortMap.entrySet());
			Collections.sort(list, new Comparator<Map.Entry<String,Integer>>(){
				public int compare (Map.Entry<String,Integer> o1, Map.Entry<String,Integer> o2) {
					return o2.getValue().compareTo(o1.getValue());
				}
			});
			for(Map.Entry<String,Integer> entry : list) {
				if(count>4)
					break;
				hashmap.put(entry.getKey(),entry.getValue());
			}
			return hashmap;
		}
}
