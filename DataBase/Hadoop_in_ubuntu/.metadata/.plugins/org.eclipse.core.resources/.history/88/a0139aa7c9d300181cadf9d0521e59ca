package Hw1;
import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class Result_Reducer extends  Reducer<Text, Text, Text, Text>{
		private Text result = new Text();
		public Map<String ,List> map = new HashMap<String, List>();
		public void reduce(Text key,Iterator<Text> values,OutputCollector<Text,Text> output)throws IOException, InterruptedException{
			
			ArrayList list=new ArrayList();
			while(values.hasNext()) {
				list.add(Integer.parseInt(values.next().toString()));
			}
			Collections.sort(list,new Comparator<Integer>() {
				public int compare(Integer o1, Integer o2) {
					return o1.compareTo(o2);
				}
			});			
			map.put(key.toString(),list);
		}
		public void cleanup(OutputCollector<Text,List> output,Reporter reporter) throws IOException, InterruptedException {

			sort_value(map,output);
						
		}
		public void sort_value(Map<String,List> unsortMap,OutputCollector<Text,List> output) {
			List<Map.Entry<String , List>> list= new LinkedList<Map.Entry<String,List>>(unsortMap.entrySet());
			for(Map.Entry<String,List> entry : list) {
				output.collect(new Text(entry.getKey()), (entry.getValue()));			
		}
//		
//		public void sortMap (Map<String,String> unsortMap,OutputCollector<Text,Text> output ) throws IOException, InterruptedException{
//			Map<String, String> hashmap = new HashMap<String,String>();
//			List<Map.Entry<String,String>> list = new LinkedList<Map.Entry<String,String>>(unsortMap.entrySet());
//			Collections.sort(list, new Comparator<Map.Entry<String,Integer>>(){
//				public int compare (Map.Entry<String,Integer> o1, Map.Entry<String,Integer> o2) {
//					return o2.getValue().compareTo(o1.getValue());
//				}
//			});
//			for(Map.Entry<String,Integer> entry : list) {
//				Run_test.Most_Loc[count]=entry.getKey();
//				context.write(new Text(entry.getKey()), new LongWritable(entry.getValue()));
//				hashmap.put(entry.getKey(),entry.getValue());count++;
			//}
			
		}


