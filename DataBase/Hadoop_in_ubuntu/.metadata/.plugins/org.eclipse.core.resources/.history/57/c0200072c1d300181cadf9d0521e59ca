package Hw1;
import java.io.IOException;
import java.util.List;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Run_test {
	public static final String[] Most_Peo = new String[5];
	public static final String[] Most_Loc = new String[5];
	
  public static void main(String[] args) throws IllegalArgumentException, IOException, ClassNotFoundException, InterruptedException{

    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "Run_test");
    job.setJarByClass(Run_test.class);
    job.setMapperClass(Most_Call_People_Mapper.class);
    job.setReducerClass(Most_Call_People_Reducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(LongWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));//여기서 입력값 조절hadoop jar '/home/s/hadoop-ex/Hadoop_hw1/src/Hw1/Hw1.jar' Hw1.Run_test /Hw1/Input /Hw1/Output
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    job.waitForCompletion(true);
    System.out.println("1작업 종");
//    for (String var:Most_Peo) {
//    	System.out.println(var);
//    	System.out.println("출력되는지보");
//    }
//    
    Job job2 = Job.getInstance(conf, "Run_test");
    job2.setJarByClass(Run_test.class);
    job2.setMapperClass(Most_Call_Location_Mapper.class);
    job2.setReducerClass(Most_Call_Location_Reducer.class);
    job2.setOutputKeyClass(Text.class);
    job2.setOutputValueClass(LongWritable.class);
    FileInputFormat.addInputPath(job2,new Path(args[0]));
    FileOutputFormat.setOutputPath(job2, new Path(args[2]));
    job2.waitForCompletion(true);
    
    Job job3 = Job.getInstance(conf, "Run_test");
    job3.setJarByClass(Run_test.class);
    job3.setMapperClass(Result_Mapper.class);
    job3.setReducerClass(Result_Reducer.class);
    job3.setOutputKeyClass(OutputCollector.class);
    job3.setOutputValueClass(OutputCollector.class);
    FileInputFormat.addInputPath(job3,new Path(args[0]));
    FileOutputFormat.setOutputPath(job3, new Path(args[3]));
    job3.waitForCompletion(true);
    
  }
}